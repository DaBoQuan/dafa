syntax = "proto2";

option java_outer_classname = "LandLoadMsg";
package com.dafagame.proto;
//option optimize_for = LITE_RUNTIME;
option optimize_for = SPEED;

// 斗地主游戏协议
enum ProtoType {
        // 获取场景数据
        SceneInfoReqType = 20310;

        // 场景数据通知
        SceneInfoResType = 20311;

        // 游戏开始发牌通知
        SendCardResType = 20312;

        // 叫牌
        CallCardReqType = 20314;
        CallCardResType = 20315;

        // 加倍
        CallDoubleReqType = 20316;
        CallDoubleResType = 20317;

        // 出牌
        PlayCardsReqType = 20318;
        PlayCardsResType = 20319;

        // 不要
        AbandonReqType = 20320;
        AbandonResType = 20321;

        // 托管
        SysHostReqType = 20322;
        SysHostResType = 20323;

        // 取消托管
        CancelSysHostReqType = 20324;
        CancelSysHostResType = 20325;

        // 用户进出桌子
        PlayerEnterTableResType = 20326;
        PlayerLeaveTableResType = 20327;

        // 结算
        CompetitionResultResType = 20328;

        // 继续游戏
        ContinueGameReqType = 20330;

        // 游戏维护
        GameMaintainNtfType = 20332;
        // 游戏暂停
        GamePauseNtfType = 20334;
}

// 游戏状态枚举
enum GameState {
        READY = 0; // 准备状态
        START = 1; // 发牌
        CALL_CARD = 2; // 叫地主
        DOUBLE = 3; // 加倍
        PLAYING = 4; // 游戏中
        FINISH = -1; // 结束
}

enum CallType {
        NOT_CALL = -1; // 未叫
        DONT_CALL = 0; // 不叫
        CALL_LOAD_1 = 1; // 1分
        CALL_LOAD_2 = 2; // 2分
        CALL_LOAD_3 = 3; // 3分
}

enum CardType {
        DAN = 1; //单牌：单张牌
        DUI_ZI = 2; //对牌：两个
        SAN_DAI_DAN = 4; //三带单：三张牌 ＋ 一张单牌。例如： 888+9
        SAN_DAI_DUI = 5; //三带对：三张牌 ＋ 一对牌。例如： 888+99
        SAN_BU_DAI = 3; //三张牌：三张牌点相同的牌。
        SHUN_ZI = 6; //单顺：五张或更多连续的单牌。例如：3+4+5+6+7+8。不包括2和大、小王。
        SHUANG_SHUN = 7; //双顺：三个或更多连续的对牌。例如：33+44+55。不包括2和大、小王。
        FEI_JI_DAI_DAN = 9; //三顺＋同数量的一套牌,333444+69,69也可以是一对
        FEI_JI_DAI_DUI = 10; //三顺＋同数量的一套牌,333444555+667799
        SAN_SHUN = 8; //三顺：二个或更        多连续的三张牌。例如：333444、444555666777。不包括2和大、小王。
        SI_DAI_DAN = 13; //四张牌＋任意两套张数相同的单牌。例如：5555＋3＋8
        SI_DAI_DUI = 14; //四张牌＋任意两套张数相同的对牌。例如：4444＋55＋77
        WANG_ZHA = 12; //火箭：即双王（双花牌），什么牌型都可打，是最大的牌
        ZHA_DAN = 11; //四张牌点相同的牌（如四个8）。除火箭和比自己大的炸弹外，什么牌型都可打。
}

message Msg {
        required int32 proto = 1;
        required bytes data = 2;
}

// 场景信息req
message SceneInfoReq{
}

// 场景信息res
message SceneInfoRes {
        // 玩家信息
        repeated PlayerInfo players = 1;
        // 底牌
        repeated int32 hiddenCards = 2;
        // 底分
        required double baseLimit = 3;
        // 场次名称
        required string roundName = 4;
        // 房间名
        required string roomNumber = 5;
        // 局号
        required string inning = 6;
        // 状态
        required int32 state = 7;
        // 叫分倍数配置
        repeated int32 callMulti = 8;

        // 当前操作者 叫牌阶段、加倍阶段(不依赖此字段)、出牌阶段
        required int32 currentOrder = 9;
        // 剩余时间
        optional int32 timeout = 10;
        // 地主叫分
        optional int32 multiple = 11;

        // 不同场景数据
        repeated SceneCallCard sceneCallCard = 12;
        repeated SceneCallDouble sceneCallDouble = 13;
        repeated ScenePlayCard scenePlayCard = 14;
}

// 场景信息 叫牌
message SceneCallCard {
        required int32 order = 1;
        required int32 callType = 2;

}

// 场景信息 加倍
message SceneCallDouble {
        required int32 order = 1;
        optional bool callDouble = 2; // null或没有则还未叫

}

// 场景信息 出牌
message ScenePlayCard {
        required int32 order = 1;
        repeated int32 cards = 2; // 没有或空数组表弃牌
}

// 玩家信息结构体
message PlayerInfo {
        // 玩家id
        required int64 uid = 1;
        // 昵称
        required string nickname = 2;
        // 头像
        required int32 avatar = 3;
        // 等级
        required int32 grade = 4;
        // 顺序
        required int32 order = 5;
        // 玩家的金币
        required double balance = 6;

        // 是否地主
        optional bool landLoad = 7;
        // 叫牌类型
        optional int32 callType = 8;
        // 是否加倍
        optional bool doubled = 9;
        // 玩家是否托管
        optional bool sysHost = 10;
        // 倍数
        optional int32 multiple = 11;
        // 剩余牌数
        optional int32 poker_count = 12;
        // 叫的分数
        //        required int32 score = 13;
        // 玩家手牌
        repeated int32 pokers = 14;
        // 记牌数据
        repeated CardCounter cardCounter = 15;
        // 性别 0男 1女
        required int32 sex = 13;
}

// 记牌器数据
message CardCounter {
        required int32 card = 1;
        required int32 count = 2;
}

// 发牌
message SendCardRes {
        // 牌数组
        repeated int32 card = 1;
        // 第一个叫地主的玩家位置
        required int32 callPosition = 2;
        // 是否因为牌荒
        required bool causeNoSuitableCard = 3;
        optional int32 timeout = 4;
}

// 叫牌req
message CallCardReq {
        required int32 callType = 1;
}

// 叫牌res
message CallCardRes {
        optional int32 callType = 1;
        optional int32 order = 2;
        optional int32 nextCallerOrder = 3;
        optional int32 landLoadUid = 4;
        optional int32 landLoadOrder = 5;
        repeated int32 hiddenCards = 6;
        optional int32 timeout = 7;

        optional int32 code = 8;
        optional string msg = 9;
}

// 所有状态错误码
enum Code {
        OK = 1;
        ContentErr = 2; // 请求体错误
        UnknownErr = 3; // 未知错误 程序问题
        PlayerNotOnline = 8; // 玩家不在线
        PlayerNotInTable = 14; // 玩家不房间

        CallCardOver = 4; // 叫牌已结束
        CallCardAlready = 5; // 玩家已叫牌
        CallCardSmaller = 6; // 叫牌比上家小

        CallDoubleCantLandLoad = 7; // 地主不能加倍

        NotUrTurn = 9; // 当前回合不是你出牌
        NoCards = 10; // 出牌数据为空
        CardTypeErr = 11; // 牌型错误
        CardNotExist = 12; // 牌不存在 or 你没有这张牌

        CantAbandon = 13; // 当前不能弃牌（头家）
}

// 加倍req
message CallDoubleReq {
        required bool isDouble = 1;
}

// 加倍res
message CallDoubleRes {
        optional bool isDouble = 1;
        optional int32 order = 2;
        optional bool isCallOver = 3;
        optional int32 nextCallerOrder = 4;
        optional int32 timeout = 5;

        optional int32 code = 6;
        optional string msg = 7;
}

// 出牌req
message PlayCardsReq {
        repeated int32 cards = 4;
}

// 出牌res
message PlayCardsRes {
        required int32 uid = 1;
        // 出牌的座位号
        required int32 order = 2;
        // 下个出牌的座位号
        required int32 nextPlayOrder = 3;
        // 出的牌
        repeated int32 cards = 4;
        // 出的牌型
        required int32 cardsType = 5;
        // 超时时间
        optional int32 timeout = 6;
        // 下家是否要的起
        required bool nextPlayCanHold = 7;

        required int32 code = 8;
        optional string msg = 9;
}

// 不出req
message AbandonReq {
}

// 不出res
message AbandonRes {
        required int32 order = 1;
        // 下个出牌的座位号
        required int32 nextPlayOrder = 2;
        // 下个是否新一轮
        required bool isNewTurn = 3;
        // 超时时间
        optional int32 timeout = 4;
        // 下家是否要的起
        required bool nextPlayCanHold = 5;

        required int32 code = 6;
        optional string msg = 7;
}

// 托管req
message SysHostReq {
}

// 托管res
message SysHostRes {
        required int32 uid = 1;
        // 座位号 0 1 2
        required int32 order = 2;

        required int32 code = 3;
        optional string msg = 4;
}

// 取消托管
message CancelSysHostReq {
}

// 取消托管res
message CancelSysHostRes {
        required int32 uid = 1;
        required int32 order = 2;

        required int32 code = 3;
        optional string msg = 4;
}

message CompetitionResultRes {
        repeated PlayerResult result = 1;
}

message PlayerEnterTableRes {
        required PlayerInfo player = 1;
}

message PlayerLeaveTableRes {
        required int32 order = 1;
        required int32 uid = 2;
        required int32 reason = 3;
}

// 继续游戏
message ContinueGameReq {
}

// 玩家打牌结果
message PlayerResult {
        // 用户id
        required int32 uid = 1;
        // 座位号 0 1 2
        required int32 order = 2;
        // 昵称
        required string nickname = 3;
        // 输赢金额
        required double result = 4;
        // 倍数积
        required int32 multi = 5;
        // 是否破产
        required bool hasBroken = 6;
        // 是否地主
        required bool isLandLoad = 7;
        // 剩余牌
        repeated int32 leftCards = 12;

        // 自己的才有 倍数详情
        // 加倍
        optional int32 doubleMulti = 8;
        // 火箭
        optional int32 rocketMulti = 9;
        // 炸弹
        optional int32 boomMulti = 10;
        // 春天 & 反春天
        optional int32 springMulti = 11;

        required int32 code = 13;
        optional string msg = 14;
}